from PyQt6.QtCore import pyqtSlot
from PyQt6.QtWidgets import QWidget, QVBoxLayout, QLabel, QTextBrowser, QLineEdit, QPushButton, QComboBox

class CentralWidget(QWidget):
    def __init__(self, parent=None):
        super(CentralWidget, self).__init__(parent)

        # Mapping: Ausgewählter Text → entsprechende Methode
        self.__dict_acquisition_types = {
            "Linear": self.__linear,
            "Degression": self.__degression,
            "Degression auf Linear": self.__degression_to_linear
        }

        box_layout = QVBoxLayout()  # Vertikales Layout für die Eingabemaske

        # Eingabefeld: Anschaffungswert
        box_layout.addWidget(QLabel("Anschaffungswert in Euro"))
        self.__line_edit_acquisition_value = QLineEdit("50")
        box_layout.addWidget(self.__line_edit_acquisition_value)

        # Eingabefeld: Nutzungsdauer
        box_layout.addWidget(QLabel("Abschreibungsdauer in Jahren"))
        self.__line_edit_acquisition_period = QLineEdit("4")
        box_layout.addWidget(self.__line_edit_acquisition_period)

        # Auswahlfeld: Abschreibungsart
        box_layout.addWidget(QLabel("Abschreibungsart"))
        self.__combo_box_acquisition_typ = QComboBox()
        for key in self.__dict_acquisition_types.keys():
            self.__combo_box_acquisition_typ.addItem(key)
        box_layout.addWidget(self.__combo_box_acquisition_typ)

        # Button: Berechnung starten
        push_button = QPushButton("Berechnen")
        push_button.released.connect(self.__depreciation)
        box_layout.addWidget(push_button)

        # Ausgabefeld: Ergebnisanzeige
        self.__text_browser = QTextBrowser()
        box_layout.addWidget(self.__text_browser)

        self.setLayout(box_layout)

    @pyqtSlot()
    def __depreciation(self):
        # Aktuelle Auswahl auslesen und zugehörige Methode aufrufen
        current_text = self.__combo_box_acquisition_typ.currentText()
        self.__dict_acquisition_types[current_text]()  # Methode ausführen

    def __linear(self):
        self.__text_browser.append("Lineare Abschreibung")

        years = int(self.__line_edit_acquisition_period.text())
        value = float(self.__line_edit_acquisition_value.text())

        loos_per_year = value / years  # Jährlicher Abschreibungsbetrag

        current_year = 1
        while value > 1.00:
            line = f"Restwert im {current_year}. Jahr:\t{value:5.2f} Euro"
            self.__text_browser.append(line)

            value -= loos_per_year
            current_year += 1

        # Restwert auf 1 Euro fixieren
        line = f"Restwert ab dem {current_year}. Jahr:\t 1.00 Euro"
        self.__text_browser.append(line)

    def __degression(self):
        self.__text_browser.append("Degressive Abschreibung")

        years = int(self.__line_edit_acquisition_period.text())
        value = float(self.__line_edit_acquisition_value.text())

        # Berechnung des jährlichen Abschlagsfaktors
        loos_per_year = (1 - 2 / years)
        if loos_per_year < 0.80:
            loos_per_year = 0.80  # Mindestfaktor

        current_year = 1
        while years >= current_year:
            line = f"Restwert im {current_year}. Jahr:\t{value:5.2f} Euro"
            self.__text_browser.append(line)

            value *= loos_per_year
            current_year += 1

        line = f"Restwert ab dem {current_year}. Jahr:\t 1.00 Euro"
        self.__text_browser.append(line)

    def __degression_to_linear(self):
        self.__text_browser.append("Degressive auf lineare Abschreibung")

        # Diese Methode ist noch nicht implementiert.
        # Beispiel: erst degressiv bis Vorteil verloren, dann linear zu Restwert
